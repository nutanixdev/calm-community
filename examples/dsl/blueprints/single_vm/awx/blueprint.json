{
    "spec": {
        "name": "SingleAwxNode",
        "description": "",
        "resources": {
            "type": "USER",
            "service_definition_list": [
                {
                    "name": "DefaultService",
                    "description": "",
                    "port_list": [],
                    "singleton": false,
                    "tier": "",
                    "depends_on_list": [],
                    "variable_list": [],
                    "action_list": [
                        {
                            "name": "action_create",
                            "description": "",
                            "type": "system",
                            "critical": true,
                            "runbook": {
                                "name": "Runbook_for_Service_DefaultService_action_create",
                                "description": "",
                                "main_task_local_reference": {
                                    "kind": "app_task",
                                    "name": "DAG_Task_for_Service_DefaultService_action_create"
                                },
                                "task_definition_list": [
                                    {
                                        "name": "DAG_Task_for_Service_DefaultService_action_create",
                                        "description": "",
                                        "type": "DAG",
                                        "target_any_local_reference": {
                                            "kind": "app_service",
                                            "name": "DefaultService"
                                        },
                                        "attrs": {
                                            "edges": []
                                        },
                                        "child_tasks_local_reference_list": [],
                                        "variable_list": [],
                                        "retries": "",
                                        "timeout_secs": ""
                                    }
                                ],
                                "variable_list": []
                            }
                        },
                        {
                            "name": "action_delete",
                            "description": "",
                            "type": "system",
                            "critical": true,
                            "runbook": {
                                "name": "Runbook_for_Service_DefaultService_action_delete",
                                "description": "",
                                "main_task_local_reference": {
                                    "kind": "app_task",
                                    "name": "DAG_Task_for_Service_DefaultService_action_delete"
                                },
                                "task_definition_list": [
                                    {
                                        "name": "DAG_Task_for_Service_DefaultService_action_delete",
                                        "description": "",
                                        "type": "DAG",
                                        "target_any_local_reference": {
                                            "kind": "app_service",
                                            "name": "DefaultService"
                                        },
                                        "attrs": {
                                            "edges": []
                                        },
                                        "child_tasks_local_reference_list": [],
                                        "variable_list": [],
                                        "retries": "",
                                        "timeout_secs": ""
                                    }
                                ],
                                "variable_list": []
                            }
                        },
                        {
                            "name": "action_start",
                            "description": "",
                            "type": "system",
                            "critical": true,
                            "runbook": {
                                "name": "Runbook_for_Service_DefaultService_action_start",
                                "description": "",
                                "main_task_local_reference": {
                                    "kind": "app_task",
                                    "name": "DAG_Task_for_Service_DefaultService_action_start"
                                },
                                "task_definition_list": [
                                    {
                                        "name": "DAG_Task_for_Service_DefaultService_action_start",
                                        "description": "",
                                        "type": "DAG",
                                        "target_any_local_reference": {
                                            "kind": "app_service",
                                            "name": "DefaultService"
                                        },
                                        "attrs": {
                                            "edges": []
                                        },
                                        "child_tasks_local_reference_list": [],
                                        "variable_list": [],
                                        "retries": "",
                                        "timeout_secs": ""
                                    }
                                ],
                                "variable_list": []
                            }
                        },
                        {
                            "name": "action_stop",
                            "description": "",
                            "type": "system",
                            "critical": true,
                            "runbook": {
                                "name": "Runbook_for_Service_DefaultService_action_stop",
                                "description": "",
                                "main_task_local_reference": {
                                    "kind": "app_task",
                                    "name": "DAG_Task_for_Service_DefaultService_action_stop"
                                },
                                "task_definition_list": [
                                    {
                                        "name": "DAG_Task_for_Service_DefaultService_action_stop",
                                        "description": "",
                                        "type": "DAG",
                                        "target_any_local_reference": {
                                            "kind": "app_service",
                                            "name": "DefaultService"
                                        },
                                        "attrs": {
                                            "edges": []
                                        },
                                        "child_tasks_local_reference_list": [],
                                        "variable_list": [],
                                        "retries": "",
                                        "timeout_secs": ""
                                    }
                                ],
                                "variable_list": []
                            }
                        },
                        {
                            "name": "action_restart",
                            "description": "",
                            "type": "system",
                            "critical": true,
                            "runbook": {
                                "name": "Runbook_for_Service_DefaultService_action_restart",
                                "description": "",
                                "main_task_local_reference": {
                                    "kind": "app_task",
                                    "name": "DAG_Task_for_Service_DefaultService_action_restart"
                                },
                                "task_definition_list": [
                                    {
                                        "name": "DAG_Task_for_Service_DefaultService_action_restart",
                                        "description": "",
                                        "type": "DAG",
                                        "target_any_local_reference": {
                                            "kind": "app_service",
                                            "name": "DefaultService"
                                        },
                                        "attrs": {
                                            "edges": []
                                        },
                                        "child_tasks_local_reference_list": [],
                                        "variable_list": [],
                                        "retries": "",
                                        "timeout_secs": ""
                                    }
                                ],
                                "variable_list": []
                            }
                        },
                        {
                            "name": "action_soft_delete",
                            "description": "",
                            "type": "system",
                            "critical": true,
                            "runbook": {
                                "name": "Runbook_for_Service_DefaultService_action_soft_delete",
                                "description": "",
                                "main_task_local_reference": {
                                    "kind": "app_task",
                                    "name": "DAG_Task_for_Service_DefaultService_action_soft_delete"
                                },
                                "task_definition_list": [
                                    {
                                        "name": "DAG_Task_for_Service_DefaultService_action_soft_delete",
                                        "description": "",
                                        "type": "DAG",
                                        "target_any_local_reference": {
                                            "kind": "app_service",
                                            "name": "DefaultService"
                                        },
                                        "attrs": {
                                            "edges": []
                                        },
                                        "child_tasks_local_reference_list": [],
                                        "variable_list": [],
                                        "retries": "",
                                        "timeout_secs": ""
                                    }
                                ],
                                "variable_list": []
                            }
                        }
                    ],
                    "container_spec": {}
                }
            ],
            "package_definition_list": [
                {
                    "name": "DefaultPackage",
                    "description": "",
                    "type": "CUSTOM",
                    "options": {
                        "install_runbook": {
                            "name": "DefaultPackage___install___runbook",
                            "description": "",
                            "main_task_local_reference": {
                                "kind": "app_task",
                                "name": "DefaultPackage___install___dag"
                            },
                            "task_definition_list": [
                                {
                                    "name": "DefaultPackage___install___dag",
                                    "description": "",
                                    "type": "DAG",
                                    "target_any_local_reference": {
                                        "kind": "app_service",
                                        "name": "DefaultService"
                                    },
                                    "attrs": {
                                        "edges": [
                                            {
                                                "from_task_reference": {
                                                    "kind": "app_task",
                                                    "name": "EXPAND_DISK"
                                                },
                                                "to_task_reference": {
                                                    "kind": "app_task",
                                                    "name": "K3S_INSTALL"
                                                }
                                            },
                                            {
                                                "from_task_reference": {
                                                    "kind": "app_task",
                                                    "name": "K3S_INSTALL"
                                                },
                                                "to_task_reference": {
                                                    "kind": "app_task",
                                                    "name": "AWX_INSTALL"
                                                }
                                            }
                                        ]
                                    },
                                    "child_tasks_local_reference_list": [
                                        {
                                            "kind": "app_task",
                                            "name": "EXPAND_DISK"
                                        },
                                        {
                                            "kind": "app_task",
                                            "name": "K3S_INSTALL"
                                        },
                                        {
                                            "kind": "app_task",
                                            "name": "AWX_INSTALL"
                                        }
                                    ],
                                    "variable_list": [],
                                    "retries": "",
                                    "timeout_secs": ""
                                },
                                {
                                    "name": "EXPAND_DISK",
                                    "description": "",
                                    "type": "EXEC",
                                    "target_any_local_reference": {
                                        "kind": "app_service",
                                        "name": "DefaultService"
                                    },
                                    "attrs": {
                                        "script_type": "static",
                                        "script": "vmUuid = '@@{id}@@'\ndiskSize = @@{OS_DISK_SIZE}@@ # GB\npcAddress = '@@{NTNX_PC_IP}@@'\npcUsername = '@@{CRED_PC.username}@@'\npcPassword = '@@{CRED_PC.secret}@@'\n\n# ============== DO NO CHANGE AFTER THIS ===============\n\nusrPass = '{}:{}'.format(pcUsername,pcPassword)\nb64Pass = base64.b64encode(usrPass)\n\n# Get VM\napi_url = 'https://{}:9440/api/nutanix/v3/vms/{}'.format(pcAddress,vmUuid)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Authorization': 'Basic {}'.format(b64Pass)}\n\nr = urlreq(api_url, verb='GET', headers=headers, verify=False)\nif r.ok:\n    resp = json.loads(r.content)\n\nelse:\n    print(\"Post request failed\", r.content)\n    exit(1)\n\n# Power off VM and extend disk\ndel resp['status']\n\ndisk_size_mib = diskSize * 1024\ndisk_size_bytes = disk_size_mib * 1024**2\n\nresp['spec']['resources']['disk_list'][0]['disk_size_mib'] = disk_size_mib\nresp['spec']['resources']['disk_list'][0]['disk_size_bytes'] = disk_size_bytes\nresp['spec']['resources']['power_state'] = 'OFF'\n\npayload = resp\n\nr = urlreq(api_url, verb='PUT', params=json.dumps(payload), headers=headers, verify=False)\nif r.ok:\n    resp = json.loads(r.content)\n    taskUuid = resp['status']['execution_context']['task_uuid']\n\nelse:\n    print(\"Post request failed\", r.content)\n    exit(1)\n\n\n# Monitor task\nstate = \"\"\nwhile state != \"SUCCEEDED\":\n    api_url = 'https://{}:9440/api/nutanix/v3/tasks/{}'.format(pcAddress,taskUuid)\n\n    sleep(2)\n    r = urlreq(api_url, verb='GET', headers=headers, verify=False)\n    if r.ok:\n        resp = json.loads(r.content)\n        state = resp['status']\n        if state == \"FAILED\":\n            print(\"Task failed\", resp['progress_message'])\n            exit(1)\n\n    else:\n        print(\"Post request failed\", r.content)\n        exit(1)\n\n# Wait for VM to power off\napi_url = 'https://{}:9440/api/nutanix/v3/vms/{}'.format(pcAddress,vmUuid)\nr = urlreq(api_url, verb='GET', headers=headers, verify=False)\nif r.ok:\n    resp = json.loads(r.content)\n    power_state = resp['status']['resources']['power_state']\n\nelse:\n    print(\"Post request failed\", r.content)\n    exit(1)\n\nstate = \"\"\nwhile state != \"OFF\":\n    api_url = 'https://{}:9440/api/nutanix/v3/vms/{}'.format(pcAddress,vmUuid)\n\n    sleep(2)\n    r = urlreq(api_url, verb='GET', headers=headers, verify=False)\n    if r.ok:\n        resp = json.loads(r.content)\n        state = resp['status']['resources']['power_state']\n        if state == \"FAILED\":\n            print(\"Task failed\", resp['progress_message'])\n            exit(1)\n\n    else:\n        print(\"Post request failed\", r.content)\n        exit(1)\n\n# Power on VM\ndel resp['status']\n\nresp['spec']['resources']['power_state'] = 'ON'\n\napi_url = 'https://{}:9440/api/nutanix/v3/vms/{}'.format(pcAddress,vmUuid)\npayload = resp\n\nr = urlreq(api_url, verb='PUT', params=json.dumps(payload), headers=headers, verify=False)\nif r.ok:\n    resp = json.loads(r.content)\n    taskUuid = resp['status']['execution_context']['task_uuid']\n\nelse:\n    print(\"Post request failed\", r.content)\n    exit(1)\n\n# Monitor task\nstate = \"\"\nwhile state != \"SUCCEEDED\":\n    api_url = 'https://{}:9440/api/nutanix/v3/tasks/{}'.format(pcAddress,taskUuid)\n\n    sleep(2)\n    r = urlreq(api_url, verb='GET', headers=headers, verify=False)\n    if r.ok:\n        resp = json.loads(r.content)\n        state = resp['status']\n        if state == \"FAILED\":\n            print(\"Task failed\", resp['progress_message'])\n            exit(1)\n\n    else:\n        print(\"Post request failed\", r.content)\n        exit(1)\n\nprint(\"OS disk extended to {} GB\".format(diskSize))\n\n# Wait until VM boots\nsleep(60)"
                                    },
                                    "child_tasks_local_reference_list": [],
                                    "variable_list": [],
                                    "retries": "",
                                    "timeout_secs": ""
                                },
                                {
                                    "name": "K3S_INSTALL",
                                    "description": "",
                                    "type": "EXEC",
                                    "target_any_local_reference": {
                                        "kind": "app_service",
                                        "name": "DefaultService"
                                    },
                                    "attrs": {
                                        "script_type": "sh",
                                        "script": "#!/bin/bash\n\nset -e\n\nif [ @@{K3S_INSTALL}@@ != True ] ; then\n    exit 0\nfi\n\necho \"Creating resolv.conf.k3s...\"\necho \"nameserver 8.8.8.8\" | sudo tee /etc/resolv.conf.k3s\n\necho \"Installing K3s...\"\ncurl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644 --resolv-conf /etc/resolv.conf.k3s\n\necho \"Waiting for K3s to start...\"\nuntil kubectl get nodes | grep -i \"Ready\"; do sleep 2 ; done\n\necho \"K3s installed...\"\nkubectl get nodes -o wide\n\nDOCKER_HUB_USERNAME=\"@@{DOCKER_HUB_USERNAME}@@\"\nDOCKER_HUB_PASSWORD=\"@@{DOCKER_HUB_PASSWORD}@@\"\n\nif [ -z \"$DOCKER_HUB_USERNAME\" ] && [ -z \"$DOCKER_HUB_PASSWORD\" ] ; then\n    exit 0\nelse\n    echo \"Setting Docker Hub credentials to avoid pull rate limits...\"\n    kubectl create secret docker-registry docker-hub-secret \\\n        --docker-username=${DOCKER_HUB_USERNAME} \\\n        --docker-password=${DOCKER_HUB_PASSWORD}\n\n    kubectl patch serviceaccount default -p '{\"imagePullSecrets\": [{\"name\": \"docker-hub-secret\"}]}' \nfi"
                                    },
                                    "child_tasks_local_reference_list": [],
                                    "variable_list": [],
                                    "retries": "",
                                    "timeout_secs": ""
                                },
                                {
                                    "name": "AWX_INSTALL",
                                    "description": "",
                                    "type": "SET_VARIABLE",
                                    "target_any_local_reference": {
                                        "kind": "app_service",
                                        "name": "DefaultService"
                                    },
                                    "attrs": {
                                        "script_type": "sh",
                                        "script": "#!/bin/bash\n\nset -e\n\nif [ @@{AWX_INSTALL}@@ != True ] ; then\n    exit 0\nfi\n\necho \"Installing dependencies...\"\nsudo apt install -y make\n\necho \"Cloning repository...\"\ncd ~\ngit clone https://github.com/ansible/awx-operator.git\ncd awx-operator\n\necho \"Changing to latest version branch...\"\nAWX_OPERATOR_LATEST_VER=$(curl -LsI -o /dev/null -w %{url_effective} https://github.com/ansible/awx-operator/releases/latest | rev | cut -d'/' -f1 | rev)\ngit checkout $AWX_OPERATOR_LATEST_VER\n\necho \"Installing AWX Operator...\"\nexport NAMESPACE=@@{AWX_NAMESPACE}@@\nmake deploy\n\necho \"Changing K3s context to awx namespace...\"\nsudo kubectl config set-context --current --namespace=$NAMESPACE\n\necho \"Waiting for AWX Operator to start...\"\nuntil kubectl get pods -l control-plane=controller-manager | grep -P '^(?=.*2/2)(?=.*Running)' ; do sleep 2; done\n\necho \"Creating AWX installer directory...\"\ncd ~\nmkdir awx-installer\ncd awx-installer\n\necho \"Creating AWX SSL certificate...\"\nexport AWX_HOST=\"@@{address}@@.nip.io\"\nopenssl req -x509 -nodes -days 3650 -newkey rsa:2048 -out ./tls.crt -keyout ./tls.key -subj \"/CN=${AWX_HOST}/O=${AWX_HOST}\" -addext \"subjectAltName = DNS:${AWX_HOST}\"\n\necho \"Creating AWX installer files...\"\ncat <<EOF >>awx.yaml\n---\napiVersion: awx.ansible.com/v1beta1\nkind: AWX\nmetadata:\n  name: awx\nspec:\n  # These parameters are designed for use with:\n  # - AWX Operator: 0.17.0\n  #   https://github.com/ansible/awx-operator/blob/0.17.0/README.md\n  # - AWX: 20.0.0\n  #   https://github.com/ansible/awx/blob/20.0.0/INSTALL.md\n\n  admin_user: admin\n  admin_password_secret: awx-admin-password\n\n  ingress_type: ingress\n  ingress_tls_secret: awx-secret-tls\n  hostname: ${AWX_HOST}\n\n  postgres_configuration_secret: awx-postgres-configuration\n\n  postgres_storage_class: awx-postgres-volume\n  postgres_storage_requirements:\n    requests:\n      storage: 8Gi\n\n  projects_persistence: true\n  projects_existing_claim: awx-projects-claim\n\n  web_resource_requirements: {}\n  task_resource_requirements: {}\n  ee_resource_requirements: {}\nEOF\ncat <<EOF >>kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\ngeneratorOptions:\n  disableNameSuffixHash: true\n\nsecretGenerator:\n  - name: awx-secret-tls\n    type: kubernetes.io/tls\n    files:\n      - tls.crt\n      - tls.key\n\n  - name: awx-postgres-configuration\n    type: Opaque\n    literals:\n      - host=awx-postgres\n      - port=5432\n      - database=awx\n      - username=awx\n      - password=@@{AWX_DB_PASSWORD}@@\n      - type=managed\n\n  - name: awx-admin-password\n    type: Opaque\n    literals:\n      - password=@@{AWX_ADMIN_PASSWORD}@@\n\nresources:\n  - pv.yaml\n  - pvc.yaml\n  - awx.yaml\nEOF\ncat <<EOF >>pv.yaml\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: awx-postgres-volume\nspec:\n  accessModes:\n    - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  capacity:\n    storage: 8Gi\n  storageClassName: awx-postgres-volume\n  hostPath:\n    path: /data/postgres\n\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: awx-projects-volume\nspec:\n  accessModes:\n    - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  capacity:\n    storage: 2Gi\n  storageClassName: awx-projects-volume\n  hostPath:\n    path: /data/projects\nEOF\ncat <<EOF >>pvc.yaml\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: awx-projects-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  volumeMode: Filesystem\n  resources:\n    requests:\n      storage: 2Gi\n  storageClassName: awx-projects-volume\nEOF\n\necho \"Creating directories for persistent data...\"\nsudo mkdir -p /data/postgres\nsudo mkdir -p /data/projects\nsudo chmod 755 /data/postgres\nsudo chown 1000:0 /data/projects\n\necho \"Deploying AWX...\"\nkubectl apply -k .\n\necho \"Waiting for AWX to start...\"\ntimeout 10m bash -c '\nsleep 60\nresponse=$(curl --write-out \"%{http_code}\" --silent --output /dev/null ${AWX_HOST})\nwhile [ $response -ne 200 ]\ndo\n  response=$(curl --write-out \"%{http_code}\" --silent --output /dev/null ${AWX_HOST})\n  echo Response: Installing...\n  response=$response \n  sleep 20\ndone'\n\necho \"AWX successfully installed! Login URL: https://${AWX_HOST}\"\necho \"AWX_HOST = ${AWX_HOST}\"",
                                        "eval_variables": [
                                            "AWX_HOST"
                                        ]
                                    },
                                    "child_tasks_local_reference_list": [],
                                    "variable_list": [],
                                    "retries": "",
                                    "timeout_secs": ""
                                }
                            ],
                            "variable_list": []
                        },
                        "uninstall_runbook": {
                            "name": "Runbook_for_Package_DefaultPackage_action_uninstall",
                            "description": "",
                            "main_task_local_reference": {
                                "kind": "app_task",
                                "name": "DAG_Task_for_Package_DefaultPackage_action_uninstall"
                            },
                            "task_definition_list": [
                                {
                                    "name": "DAG_Task_for_Package_DefaultPackage_action_uninstall",
                                    "description": "",
                                    "type": "DAG",
                                    "target_any_local_reference": {
                                        "kind": "app_service",
                                        "name": "DefaultService"
                                    },
                                    "attrs": {
                                        "edges": []
                                    },
                                    "child_tasks_local_reference_list": [],
                                    "variable_list": [],
                                    "retries": "",
                                    "timeout_secs": ""
                                }
                            ],
                            "variable_list": []
                        }
                    },
                    "service_local_reference_list": [
                        {
                            "kind": "app_service",
                            "name": "DefaultService"
                        }
                    ],
                    "variable_list": [],
                    "version": ""
                }
            ],
            "published_service_definition_list": [],
            "substrate_definition_list": [
                {
                    "name": "DefaultSubstrate",
                    "description": "",
                    "type": "AHV_VM",
                    "os_type": "Linux",
                    "create_spec": {
                        "name": "@@{calm_application_name}@@",
                        "categories": {},
                        "resources": {
                            "nic_list": [
                                {
                                    "network_function_nic_type": "INGRESS",
                                    "nic_type": "NORMAL_NIC",
                                    "subnet_reference": {
                                        "kind": "subnet",
                                        "name": "desktops",
                                        "uuid": "0e26c135-d478-428e-9fb8-22c0acfa5f3a"
                                    },
                                    "network_function_chain_reference": null,
                                    "mac_address": "",
                                    "ip_endpoint_list": []
                                }
                            ],
                            "num_vcpus_per_socket": 1,
                            "num_sockets": 2,
                            "memory_size_mib": 4096,
                            "power_state": "ON",
                            "account_uuid": "4e4f1d3b-9492-4502-9eed-d994192669a4",
                            "gpu_list": [],
                            "disk_list": [
                                {
                                    "data_source_reference": {
                                        "kind": "image",
                                        "name": "UBUNTU_FOCAL_20.04_CLOUD_IMAGE",
                                        "uuid": "ec0f310f-dd22-4cbc-a0d6-0f46be7b0652"
                                    },
                                    "device_properties": {
                                        "device_type": "DISK",
                                        "disk_address": {
                                            "device_index": 0,
                                            "adapter_type": "SCSI"
                                        }
                                    },
                                    "disk_size_mib": 20480
                                }
                            ],
                            "guest_customization": {
                                "sysprep": null,
                                "cloud_init": {
                                    "user_data": "#cloud-config\nhostname: @@{name}@@\nusers:\n- name: @@{OS_CRED.username}@@\n  shell: /bin/bash\n  ssh-authorized-keys:\n  - @@{OS_CRED.public_key}@@\n  sudo:\n  - ALL=(ALL) NOPASSWD:ALL\n"
                                }
                            },
                            "serial_port_list": [
                                {
                                    "index": 0,
                                    "is_connected": false
                                }
                            ],
                            "boot_config": {
                                "boot_device": {
                                    "disk_address": {
                                        "device_index": 0,
                                        "adapter_type": "SCSI"
                                    }
                                }
                            }
                        }
                    },
                    "variable_list": [],
                    "action_list": [],
                    "readiness_probe": {
                        "connection_type": "SSH",
                        "connection_port": 22,
                        "connection_protocol": "",
                        "timeout_secs": "",
                        "delay_secs": "60",
                        "retries": "5",
                        "address": "@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
                        "disable_readiness_probe": false,
                        "login_credential_local_reference": {
                            "kind": "app_credential",
                            "name": "OS_CRED"
                        }
                    },
                    "editables": {}
                }
            ],
            "credential_definition_list": [
                {
                    "name": "OS_CRED",
                    "description": "",
                    "type": "KEY",
                    "username": "nutanix",
                    "secret": {
                        "attrs": {
                            "is_secret_modified": true
                        }
                    },
                    "editables": {}
                },
                {
                    "name": "CRED_PC",
                    "description": "",
                    "type": "PASSWORD",
                    "username": "admin",
                    "secret": {
                        "attrs": {
                            "is_secret_modified": true
                        }
                    },
                    "editables": {}
                }
            ],
            "app_profile_list": [
                {
                    "name": "Default",
                    "deployment_create_list": [
                        {
                            "published_service_local_reference_list": [],
                            "package_local_reference_list": [
                                {
                                    "kind": "app_package",
                                    "name": "DefaultPackage"
                                }
                            ],
                            "substrate_local_reference": {
                                "kind": "app_substrate",
                                "name": "DefaultSubstrate"
                            },
                            "depends_on_list": [],
                            "variable_list": [],
                            "action_list": [],
                            "min_replicas": "1",
                            "default_replicas": "",
                            "max_replicas": "1",
                            "type": "GREENFIELD",
                            "name": "DefaultDeployment",
                            "options": {},
                            "description": "",
                            "editables": {}
                        }
                    ],
                    "variable_list": [
                        {
                            "name": "K3S_INSTALL",
                            "description": "Enabling K3s lets you easily install containerized applications.",
                            "type": "LOCAL",
                            "label": "Install K3s",
                            "attrs": {},
                            "val_type": "STRING",
                            "value": "True",
                            "data_type": "BASE",
                            "is_hidden": true,
                            "is_mandatory": false
                        },
                        {
                            "name": "AWX_INSTALL",
                            "description": "Install AWX for configuration management.",
                            "type": "LOCAL",
                            "label": "Install AWX",
                            "attrs": {},
                            "val_type": "STRING",
                            "value": "True",
                            "data_type": "BASE",
                            "options": {
                                "type": "PREDEFINED",
                                "choices": [
                                    "True",
                                    "False"
                                ]
                            },
                            "is_hidden": false,
                            "is_mandatory": true
                        },
                        {
                            "name": "AWX_NAMESPACE",
                            "description": "",
                            "type": "LOCAL",
                            "label": "",
                            "attrs": {},
                            "val_type": "STRING",
                            "value": "awx",
                            "data_type": "BASE",
                            "editables": {
                                "value": true
                            },
                            "is_hidden": false,
                            "is_mandatory": false
                        },
                        {
                            "name": "AWX_DB_PASSWORD",
                            "description": "",
                            "type": "SECRET",
                            "label": "",
                            "attrs": {},
                            "val_type": "STRING",
                            "data_type": "BASE",
                            "editables": {
                                "value": true
                            },
                            "is_hidden": false,
                            "is_mandatory": false
                        },
                        {
                            "name": "AWX_ADMIN_PASSWORD",
                            "description": "",
                            "type": "SECRET",
                            "label": "",
                            "attrs": {},
                            "val_type": "STRING",
                            "data_type": "BASE",
                            "editables": {
                                "value": true
                            },
                            "is_hidden": false,
                            "is_mandatory": false
                        },
                        {
                            "name": "DOCKER_HUB_USERNAME",
                            "description": "",
                            "type": "LOCAL",
                            "label": "",
                            "attrs": {},
                            "val_type": "STRING",
                            "value": "youruser",
                            "data_type": "BASE",
                            "editables": {
                                "value": true
                            },
                            "is_hidden": false,
                            "is_mandatory": false
                        },
                        {
                            "name": "DOCKER_HUB_PASSWORD",
                            "description": "",
                            "type": "SECRET",
                            "label": "",
                            "attrs": {},
                            "val_type": "STRING",
                            "data_type": "BASE",
                            "editables": {
                                "value": true
                            },
                            "is_hidden": false,
                            "is_mandatory": false
                        },
                        {
                            "name": "OS_DISK_SIZE",
                            "description": "",
                            "type": "LOCAL",
                            "label": "",
                            "attrs": {},
                            "val_type": "INT",
                            "value": "20",
                            "data_type": "BASE",
                            "regex": {
                                "value": "^[\\d]*$",
                                "should_validate": false
                            },
                            "is_hidden": false,
                            "is_mandatory": false
                        },
                        {
                            "name": "NTNX_PC_IP",
                            "description": "",
                            "type": "LOCAL",
                            "label": "",
                            "attrs": {},
                            "val_type": "STRING",
                            "value": "127.0.0.1",
                            "data_type": "BASE",
                            "is_hidden": false,
                            "is_mandatory": false
                        }
                    ],
                    "action_list": []
                }
            ],
            "client_attrs": {
                "None": {
                    "Service": {
                        "DefaultService": {
                            "dsl_name": "DefaultService",
                            "Action": {}
                        }
                    },
                    "Package": {
                        "DefaultPackage": {
                            "dsl_name": "DefaultPackage",
                            "Action": {}
                        }
                    },
                    "Deployment": {
                        "DefaultDeployment": {
                            "dsl_name": "DefaultDeployment",
                            "Action": {}
                        }
                    },
                    "Profile": {
                        "Default": {
                            "dsl_name": "Default",
                            "Action": {}
                        }
                    },
                    "Substrate": {
                        "DefaultSubstrate": {
                            "dsl_name": "DefaultSubstrate",
                            "Action": {},
                            "AhvVm": {
                                "@@{calm_application_name}@@": {
                                    "dsl_name": "@@{calm_application_name}@@"
                                }
                            }
                        }
                    }
                }
            },
            "default_credential_local_reference": {
                "kind": "app_credential",
                "name": "OS_CRED"
            }
        }
    },
    "api_version": "3.0",
    "metadata": {
        "name": "SingleAwxNode",
        "kind": "blueprint",
        "categories": {
            "TemplateType": "Vm"
        },
        "spec_version": 1
    }
}
